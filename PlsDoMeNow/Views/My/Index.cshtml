@model PlsDoMeNow.Models.JsonString

@{
    ViewBag.Title = "Index";
}

<h2>My Todo</h2>

<div id="divContainer">
    <div id="divAddCat" onclick="addCategoryClick();">Add Category</div>
    <div id="divNewCat">
        <div>
            <strong>Name:</strong>
            <input id="txtCatName" type="text" onkeypress="newCatKeyPress(event);" />
        </div>
        <input id="btnSubmitCat" type="button" value="New Category" onclick="submitNewCat();" />
        <input id="btnCancelCat" type="button" value="Cancel" onclick="cancelNewCat();" />
    </div>
</div>

<div id="divNewList">
    <div>
        <strong>Name:</strong>
        <input id="txtListName" type="text" onkeypress="newListKeyPress(event);" />
    </div>
    <input id="btnSubmitList" type="button" value="New List" onclick="submitNewList();" />
    <input id="btnCancelList" type="button" value="Cancel" onclick="cancelNewList();" />
</div>

<div id="divNewTodo">
    <div>
        <strong>Name:</strong>
        <input id="txtTodoName" type="text" onkeypress="newTodoKeyPress(event);" />
    </div>
    <div>
        <strong>Description:</strong>
        <input id="txtTodoDesc" type="text" onkeypress="newTodoKeyPress(event);" />
    </div>
    <div>
        <strong>Duedate:</strong>
        <input id="txtTodoDue" type="datetime-local" step="1" onkeypress="newTodoKeyPress(event);" />
    </div>
    <div>
        <strong>Importance:</strong>
        <input id="numTodoImp" type="number" step="any" onkeypress="newTodoKeyPress(event);" />
    </div>
    <input id="btnSubmitTodo" type="button" value="New Todo" onclick="submitNewTodo();" />
    <input id="btnCancelTodo" type="button" value="Cancel" onclick="cancelNewTodo();" />
</div>

<script>
    var data = JSON.parse("@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.Value))");

    var lockNewCat = false;

    var currCatID = null;
    var lastDivAddList = null;
    var lockNewList = false;

    var currListID = null;
    var lastDivAddTodo = null;
    var lockNewTodo = false;

    $(document).ready(function () {
        var divAddCat = document.getElementById("divAddCat");
        var divContainer = document.getElementById("divContainer");
        if (data) {
            for (var i = 0; i < data.length; i++) {
                var divCat = renderCategory(data[i]);
                divCat.className = "divCat";
                divContainer.insertBefore(divCat, divAddCat);
            }
        }
    });

    function renderCategory(cat) {
        var divCat = document.createElement("div");
        divCat.id = generateCategoryID(cat.ID);

        var divCatName = document.createElement("div");
        divCatName.innerHTML = cat.Name;
        divCatName.className = "divCatName";
        divCat.appendChild(divCatName);

        var divLists = document.createElement("div");
        divLists.className = "divLists";
        divLists.id = generateCategoryListsID(cat.ID);
        if (cat.Lists) {
            for (var i = 0; i < cat.Lists.length; i++) {
                var divList = renderList(cat.Lists[i]);
                divLists.appendChild(divList);
            }
        }
        var divAddList = generateAddList(cat.ID);
        divLists.appendChild(divAddList);
        divCat.appendChild(divLists);

        generateCollapser(divCatName, divLists);

        return divCat;
    }

    function renderList(list) {
        var divList = document.createElement("div");
        divList.id = generateListID(list.ID);

        var divListName = document.createElement("div");
        divListName.innerHTML = list.Name;
        divListName.className = "divListName";
        divList.appendChild(divListName);

        var divTodos = document.createElement("div");
        divTodos.className = "divTodos";
        divTodos.id = generateListTodosID(list.ID);
        if (list.Todos) {
            for (var i = 0; i < list.Todos.length; i++) {
                var divTodo = renderTodo(list.Todos[i]);
                divTodos.appendChild(divTodo);
            }
        }
        var divAddTodo = generateAddTodo(list.ID);
        divTodos.appendChild(divAddTodo);
        divList.appendChild(divTodos);

        generateCollapser(divListName, divTodos);

        return divList;
    }

    function renderTodo(todo) {
        var divTodo = document.createElement("div");
        divTodo.id = generateTodoID(todo.ID);

        var divTodoName = document.createElement("div");
        divTodoName.innerHTML = todo.Name;
        divTodoName.className = "divTodoName";
        divTodo.appendChild(divTodoName);

        var divProperties = document.createElement("div");
        divProperties.className = "divProperties";
        divProperties.id = generateTodoPropertiesID(todo.ID);

        var divTodoDescription = document.createElement("div");
        var divTodoImportance = document.createElement("div");
        var divTodoDueDate = document.createElement("div");
        divTodoDescription.innerHTML = todo.Description;
        divTodoImportance.innerHTML = todo.Importance;
        divTodoDueDate.innerHTML = todo.DueDate;

        divProperties.appendChild(divTodoDescription);
        divProperties.appendChild(divTodoImportance);
        divProperties.appendChild(divTodoDueDate);

        divTodo.appendChild(divProperties);

        generateCollapser(divTodoName, divProperties);

        return divTodo;
    }

    function generateCollapser(clickElt, collapseElt) {
        clickElt.onclick = function () {
            if (isCollapsed(collapseElt)) {
                expand(collapseElt);
            } else {
                collapse(collapseElt);
            }
        }
    }

    function isHidden(elt) {
        return elt.offsetParent === null;
    }

    function show(elt) {
        elt.style.display = "inline";
    }

    function hide(elt) {
        elt.style.display = "none";
    }

    function isCollapsed(elt) {
        return elt.style.height === "0px";
    }

    function expand(elt) {
        elt.style.height = "";
    }

    function collapse(elt) {
        elt.style.height = 0;
    }

    function generateCategoryID(catID) {
        return "cat_" + catID;
    }

    function generateCategoryListsID(catID) {
        return "cat_lists_" + catID;
    }

    function generateCategoryAddListID(catID) {
        return "cat_addlist_" + catID;
    }

    function generateListID(listID) {
        return "list_" + listID;
    }

    function generateListTodosID(listID) {
        return "list_todos_" + listID;
    }

    function generateListAddTodoID(listID) {
        return "list_addtodo_" + listID;
    }

    function generateTodoID(todoID) {
        return "todo_" + todoID;
    }

    function generateTodoPropertiesID(todoID) {
        return "todo_props_" + todoID;
    }

    function getDivLists(catID) {
        var divListsID = generateCategoryListsID(catID);
        return document.getElementById(divListsID);
    }

    function getDivAddList(catID) {
        var divAddListID = generateCategoryAddListID(catID);
        return document.getElementById(divAddListID);
    }

    function getDivTodos(listID) {
        var divTodosID = generateListTodosID(listID);
        return document.getElementById(divTodosID);
    }

    function getDivAddTodo(listID) {
        var divAddTodoID = generateListAddTodoID(listID);
        return document.getElementById(divAddTodoID);
    }

    function addCategoryClick() {
        var divAddCat = document.getElementById("divAddCat");
        hide(divAddCat);

        var divNewCat = document.getElementById("divNewCat");
        var txtCatName = document.getElementById("txtCatName");
        txtCatName.value = "";
        show(divNewCat);
    }

    function newCatKeyPress(e) {
        var code = e.keyCode || e.which;
        switch (code) {
            case 13:
                submitNewCat();
                break;
            case 27:
                cancelNewCat();
                break;
        }
    }

    function submitNewCat() {
        if (lockNewCat) {
            alert("Please wait until the current category is done processing.  If you've been waiting a long time, you could try refreshing the page.");
            return;
        }

        var txtCatName = document.getElementById("txtCatName");
        var catName = txtCatName.value;

        var url = "@Url.Action("NewCat", "TodoListCategories")";
        var args = {
            name: catName
        };
        lockNewCat = true;
        $.getJSON(url, args).done(function (data) {
            var divContainer = document.getElementById("divContainer");
            var divAddCat = document.getElementById("divAddCat");
            var divCat = renderCategory(data);
            divContainer.insertBefore(divCat, divAddCat);

            show(divAddCat);

            var divNewCat = document.getElementById("divNewCat");
            hide(divNewCat);
        }).fail(function() {
            alert("ERROR:  Unable to add new category.  Perhaps you didn't put in a name?");
        }).always(function() {
            lockNewCat = false;
        });
    }

    function cancelNewCat() {
        var divAddCat = document.getElementById("divAddCat");
        show(divAddCat);

        var divNewCat = document.getElementById("divNewCat");
        hide(divNewCat);
    }

    function generateAddList(catID) {
        var divAddList = document.createElement("div");
        divAddList.innerHTML = "Add List";
        divAddList.className = "divAddList";
        divAddList.id = generateCategoryAddListID(catID);

        divAddList.onclick = function () {
            if (lastDivAddList) {
                show(lastDivAddList);
            }
            hide(divAddList);
            lastDivAddList = divAddList;

            var divLists = getDivLists(catID);
            var divNewList = document.getElementById("divNewList");
            var txtListName = document.getElementById("txtListName");
            txtListName.value = "";
            currCatID = catID;
            divLists.appendChild(divNewList);
            show(divNewList);
        };
        return divAddList;
    }

    function newListKeyPress(e) {
        var code = e.keyCode || e.which;
        switch (code) {
            case 13:
                submitNewList();
                break;
            case 27:
                cancelNewList();
                break;
        }
    }

    function submitNewList() {
        if (lockNewList) {
            alert("Please wait until the current list is done processing.  If you've been waiting a long time, you could try refreshing the page.");
            return;
        }

        var txtListName = document.getElementById("txtListName");
        var listName = txtListName.value;
        var catID = currCatID;
        var url = "@Url.Action("NewList", "TodoLists")";
        var args = {
            categoryID: catID,
            name: listName
        };
        lockNewList = true;
        $.getJSON(url, args).done(function (data) {
            var divLists = getDivLists(catID);
            var divAddList = getDivAddList(catID);
            var divList = renderList(data);
            divLists.insertBefore(divList, divAddList);

            show(divAddList);

            var divNewList = document.getElementById("divNewList");
            hide(divNewList);
        }).fail(function() {
            alert("ERROR:  Unable to add new list.  Perhaps you didn't put in a name?");
        }).always(function() {
            lockNewList = false;
        });
    }

    function cancelNewList() {
        var divAddList = getDivAddList(currCatID);
        show(divAddList);

        var divNewList = document.getElementById("divNewList");
        hide(divNewList);
    }

    function generateAddTodo(listID) {
        var divAddTodo = document.createElement("div");
        divAddTodo.innerHTML = "Add Todo";
        divAddTodo.className = "divAddTodo";
        divAddTodo.id = generateListAddTodoID(listID);

        divAddTodo.onclick = function () {
            if (lastDivAddTodo) {
                show(lastDivAddTodo);
            }
            hide(divAddTodo);
            lastDivAddTodo = divAddTodo;

            var divTodos = getDivTodos(listID);
            var divNewTodo = document.getElementById("divNewTodo");
            var txtTodoName = document.getElementById("txtTodoName");
            var txtTodoDesc = document.getElementById("txtTodoDesc");
            var txtTodoDue = document.getElementById("txtTodoDue");
            var numTodoImp = document.getElementById("numTodoImp");

            txtTodoName.value = "";
            txtTodoDesc.value = "";
            txtTodoDue.value = "";
            numTodoImp.value = "";

            currListID = listID;
            divTodos.appendChild(divNewTodo);
            show(divNewTodo);
        };
        return divAddTodo;
    }

    function newTodoKeyPress(e) {
        var code = e.keyCode || e.which;
        switch (code) {
            case 13:
                submitNewTodo();
                break;
            case 27:
                cancelNewTodo();
                break;
        }
    }

    function submitNewTodo() {
        if (lockNewTodo) {
            alert("Please wait until the current todo is done processing.  If you've been waiting a long time, you could try refreshing the page.");
            return;
        }

        var txtTodoName = document.getElementById("txtTodoName");
        var txtTodoDesc = document.getElementById("txtTodoDesc");
        var txtTodoDue = document.getElementById("txtTodoDue");
        var numTodoImp = document.getElementById("numTodoImp");

        var listID = currListID;
        var todoName = txtTodoName.value;
        var todoDesc = txtTodoDesc.value;
        var todoDue = txtTodoDue.value;
        var todoImp = numTodoImp.value;

        var url = "@Url.Action("NewTodo", "Todos")";
        var args = {
            listID: currListID,
            name: todoName,
            description: todoDesc,
            dueDate: todoDue,
            importance: todoImp
        };
        lockNewTodo = true;
        $.getJSON(url, args).done(function (data) {
            var listID = data.ListID;
            var divTodos = getDivTodos(listID);
            var divAddTodo = getDivAddTodo(listID);
            var divTodo = renderTodo(data);
            divTodos.insertBefore(divTodo, divAddTodo);

            show(divAddTodo);

            var divNewTodo = document.getElementById("divNewTodo");
            hide(divNewTodo);
        }).fail(function() {
            alert("ERROR:  Unable to add new todo.  Perhaps you didn't put in a name?");
        }).always(function() {
            lockNewTodo = false;
        });
    }

    function cancelNewTodo() {
        var divAddTodo = getDivAddTodo(currListID);
        show(divAddTodo);

        var divNewTodo = document.getElementById("divNewTodo");
        hide(divNewTodo);
    }
</script>